This notes are as per POSTGRES SQL

- <> & != are same 
- left join & right join will help you get records with NULL incase condition wont match
- NULL records won't take part in join (except full outer join) so incase t1 have 2 NULL and t2 have 1 NULL final result will have 3 NULL records not 4 (as NULL won't take part in join)
- w1.recordDate = w2.recordDate + 1 --will add one day in date
- SELECT '2024-02-05'::DATE - INTERVAL '10 days' AS new_date; --for days
- SELECT '2024-02-05'::DATE - INTERVAL '2 months' AS new_date; --for months
- SELECT '2024-02-05'::DATE - INTERVAL '3 years' AS new_date; --for years
- LAG function - LAG(price, 1, NULL)
- CROSS Join - for cross join we donot need on condition or any common column 
- Whenever counting for aggregation use the column where the chances of null values are less else the record for counting will get skipped.

{ Example-
correct SQL
with cte as (select a.name,a.id,count(a.id)
as cnt from employee as a join employee as b on a.id = b.managerid
 group by a.name,a.id)
 select name from cte where cnt >=5;
Incorrect SQL or Buggy-
with cte as (select a.name,a.id,count(a.name) --It will get skipped as NULL is not counted
as cnt from employee as a join employee as b on a.id = b.managerid
 group by a.name,a.id)
 select name from cte where cnt >=5;
}

- New column created while SELECT for manipulation is not useful/throws error while used for filtering with where clause for postgres leetcode engine, se we've to create CTE to use it for filtering 
- 

